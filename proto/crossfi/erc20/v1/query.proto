// Copyright 2022 Evmos Foundation
// This file is part of the Evmos Network packages.
//
// Evmos is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The Evmos packages are distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the Evmos packages. If not, see https://github.com/evmos/evmos/blob/main/LICENSE
syntax = "proto3";
package crossfi.erc20.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "crossfi/erc20/v1/erc20.proto";
import "crossfi/erc20/v1/genesis.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/crossfichain/crossfi-node/x/erc20/types";

// Query defines the gRPC querier service.
service Query {
  // TokenPairs retrieves registered token pairs
  rpc TokenPairs(QueryTokenPairsRequest) returns (QueryTokenPairsResponse) {
    option (google.api.http).get = "/crossfi/erc20/v1/token_pairs";
  }

  // TokenPair retrieves a registered token pair
  rpc TokenPair(QueryTokenPairRequest) returns (QueryTokenPairResponse) {
    option (google.api.http).get = "/crossfi/erc20/v1/token_pairs/{token}";
  }

  // Params retrieves the erc20 module params
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/crossfi/erc20/v1/params";
  }
}

// QueryTokenPairsRequest is the request type for the Query/TokenPairs RPC
// method.
message QueryTokenPairsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryTokenPairsResponse is the response type for the Query/TokenPairs RPC
// method.
message QueryTokenPairsResponse {
  // token_pairs is a slice of registered token pairs for the erc20 module
  repeated TokenPair token_pairs = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryTokenPairRequest is the request type for the Query/TokenPair RPC method.
message QueryTokenPairRequest {
  // token identifier can be either the hex contract address of the ERC20 or the
  // Cosmos base denomination
  string token = 1;
}

// QueryTokenPairResponse is the response type for the Query/TokenPair RPC
// method.
message QueryTokenPairResponse {
  // token_pairs returns the info about a registered token pair for the erc20
  // module
  TokenPair token_pair = 1 [(gogoproto.nullable) = false];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC
// method.
message QueryParamsResponse {
  // params are the erc20 module parameters
  Params params = 1 [(gogoproto.nullable) = false];
}
