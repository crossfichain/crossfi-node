// Copyright 2022 Evmos Foundation
// This file is part of the Evmos Network packages.
//
// Evmos is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The Evmos packages are distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the Evmos packages. If not, see https://github.com/evmos/evmos/blob/main/LICENSE
syntax = "proto3";
package crossfi.erc20.v1;

import "cosmos/bank/v1beta1/bank.proto";
import "gogoproto/gogo.proto";
option go_package = "github.com/crossfichain/crossfi-node/x/erc20/types";

// Owner enumerates the ownership of a ERC20 contract.
enum Owner {
  option (gogoproto.goproto_enum_prefix) = false;
  // OWNER_UNSPECIFIED defines an invalid/undefined owner.
  OWNER_UNSPECIFIED = 0;
  // OWNER_MODULE - erc20 is owned by the erc20 module account.
  OWNER_MODULE = 1;
  // OWNER_EXTERNAL - erc20 is owned by an external account.
  OWNER_EXTERNAL = 2;
}

// TokenPair defines an instance that records a pairing consisting of a native
//  Cosmos Coin and an ERC20 token address.
message TokenPair {
  option (gogoproto.equal) = true;
  // erc20_address is the hex address of ERC20 contract token
  string erc20_address = 1;
  // denom defines the cosmos base denomination to be mapped to
  string denom = 2;
  // enabled defines the token mapping enable status
  bool enabled = 3;
  // contract_owner is the an ENUM specifying the type of ERC20 owner (0
  // invalid, 1 ModuleAccount, 2 external address)
  Owner contract_owner = 4;

  string erc20_cheque = 5;
}

// RegisterCoinProposal is a gov Content type to register a token pair for a
// native Cosmos coin.
message RegisterCoinProposal {
  option (gogoproto.equal) = false;
  // title of the proposal
  string title = 1;
  // description of the proposal
  string description = 2;
  // metadata slice of the native Cosmos coins
  repeated cosmos.bank.v1beta1.Metadata metadata = 3
  [(gogoproto.nullable) = false];

  bool enable_cheque = 4;
}

// RegisterERC20Proposal is a gov Content type to register a token pair for an
// ERC20 token
message RegisterERC20Proposal {
  option (gogoproto.equal) = false;
  // title of the proposal
  string title = 1;
  // description of the proposal
  string description = 2;
  // erc20addresses is a slice of  ERC20 token contract addresses
  repeated string erc20addresses = 3;
}

// ToggleTokenConversionProposal is a gov Content type to toggle the conversion
// of a token pair.
message ToggleTokenConversionProposal {
  option (gogoproto.equal) = true;
  // title of the proposal
  string title = 1;
  // description of the proposal
  string description = 2;
  // token identifier can be either the hex contract address of the ERC20 or the
  // Cosmos base denomination
  string token = 3;
}

// ProposalMetadata is used to parse a slice of denom metadata and generate
// the RegisterCoinProposal content.
message ProposalMetadata {
  // metadata slice of the native Cosmos coins
  repeated cosmos.bank.v1beta1.Metadata metadata = 1
  [(gogoproto.nullable) = false];
}
